namespace: ${namespace}
cfngin_bucket: ""

sys_path: ./../fixtures

pre_deploy:
  - path: runway.cfngin.hooks.aws_lambda.upload_lambda_functions
    required: true
    data_key: lambda
    args:
      bucket: ${cfngin_bucket}
      prefix: lambda_functions/${namespace}/
      functions:
        dockerize:
          dockerize_pip: true
          runtime: python3.8
          path: ./lambda_src/dockerize_src
          include:
            - '*.py'
          exclude:
            - '*.pyc'
        nondockerize:
          path: ./lambda_src/nondockerize_src
          runtime: python3.8
          include:
            - '*.py'
          exclude:
            - '*.pyc'

stacks:
  - name: test-dockerize
    class_path: blueprints.LambdaFunction
    variables:
      AppName: dockerizepip
      Code: ${hook_data lambda.dockerize}
      Entrypoint: dockerize.handler
      PermissionsBoundary: ${cfn runway-test-infrastructure-test-runner-boundary.PolicyArn}
  - name: test-nondockerize
    class_path: blueprints.LambdaFunction
    variables:
      AppName: nondockerizepip
      Code: ${hook_data lambda.nondockerize}
      Entrypoint: nondockerize.handler
      PermissionsBoundary: ${cfn runway-test-infrastructure-test-runner-boundary.PolicyArn}

post_deploy:
  - path: hooks.awslambda_test.invoke
    required: true
    args:
      function_name: ${cfn ${namespace}-test-dockerize.LambdaFunction}
  - path: hooks.awslambda_test.invoke
    required: true
    args:
      function_name: ${cfn ${namespace}-test-nondockerize.LambdaFunction}

post_destroy:
  - path: hooks.cleanup.s3_delete_prefix
    required: true
    args:
      bucket_name: ${cfngin_bucket}
      prefix: lambda_functions/${namespace}/
